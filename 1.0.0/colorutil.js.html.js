tui.util.defineNamespace("fedoc.content", {});
fedoc.content["colorutil.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Utility methods to manipulate colors\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\n\nvar hexRX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;\n\nvar colorutil = {\n    /**\n     * pad left zero characters.\n     * @param {number} number number value to pad zero.\n     * @param {number} length pad length to want.\n     * @returns {string} padded string.\n     */\n    leadingZero: function(number, length) {\n        var zero = '',\n            i = 0;\n\n        if ((number + '').length > length) {\n            return number + '';\n        }\n\n        for (; i &lt; (length - 1); i += 1) {\n            zero += '0';\n        }\n\n        return (zero + number).slice(length * -1);\n    },\n\n    /**\n     * Check validate of hex string value is RGB\n     * @param {string} str - rgb hex string\n     * @returns {boolean} return true when supplied str is valid RGB hex string\n     */\n    isValidRGB: function(str) {\n        return hexRX.test(str);\n    },\n\n    /**\n     * Convert color hex string to rgb number array\n     * @param {string} hexStr - hex string\n     * @return {number[]} rgb numbers\n     */\n    hexToRGB: function(hexStr) {\n        var r, g, b;\n\n        if (!colorutil.isValidRGB(hexStr)) {\n            return false;\n        }\n\n        hexStr = hexStr.substring(1);\n\n        r = parseInt(hexStr.substr(0, 2), 16);\n        g = parseInt(hexStr.substr(2, 2), 16);\n        b = parseInt(hexStr.substr(4, 2), 16);\n\n        return [r, g, b];\n    },\n\n    \n    /**\n     * Convert rgb number to hex string\n     * @param {number} r - red\n     * @param {number} g - green\n     * @param {number} b - blue\n     * @returns {string|boolean} return false when supplied rgb number is not valid. otherwise, converted hex string\n     */\n    rgbToHEX: function(r, g, b) {\n        var hexStr = '#' + \n            colorutil.leadingZero(r.toString(16), 2) + \n            colorutil.leadingZero(g.toString(16), 2) +\n            colorutil.leadingZero(b.toString(16), 2);\n        \n        if (colorutil.isValidRGB(hexStr)) {\n            return hexStr;\n        }\n\n        return false;\n    },\n\n    /**\n     * Convert rgb number to HSV value\n     * @param {number} r - red\n     * @param {number} g - green\n     * @param {number} b - blue\n     * @return {number[]} hsv value\n     */\n    rgbToHSV: function(r, g, b) {\n        var max, min, h, s, v, d;\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        max = Math.max(r, g, b);\n        min = Math.min(r, g, b);\n        v = max;\n        d = max - min;\n        s = max === 0 ? 0 : (d / max);\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r: h = (g - b) / d + (g &lt; b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n                // no default\n            }\n            h /= 6;\n        }\n\n        return [\n            Math.round(h * 360), \n            Math.round(s * 100),\n            Math.round(v * 100)\n        ];\n    },\n\n    /**\n     * Convert HSV number to RGB\n     * @param {number} h - hue\n     * @param {number} s - saturation\n     * @param {number} v - value\n     * @returns {number[]} rgb value\n     */\n    hsvToRGB: function(h, s, v) {\n        var r, g, b;\n        var i;\n        var f, p, q, t;\n        \n        h = Math.max(0, Math.min(360, h));\n        s = Math.max(0, Math.min(100, s));\n        v = Math.max(0, Math.min(100, v));\n        \n        s /= 100;\n        v /= 100;\n        \n        if (s === 0) {\n            // Achromatic (grey)\n            r = g = b = v;\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        }\n        \n        h /= 60; // sector 0 to 5\n        i = Math.floor(h);\n        f = h - i; // factorial part of h\n        p = v * (1 - s);\n        q = v * (1 - s * f);\n        t = v * (1 - s * (1 - f));\n\n        switch (i) {\n            case 0: r = v; g = t; b = p; break;\n            case 1: r = q; g = v; b = p; break;\n            case 2: r = p; g = v; b = t; break;\n            case 3: r = p; g = q; b = v; break;\n            case 4: r = t; g = p; b = v; break;\n            default: r = v; g = p; b = q; break;\n        }\n        \n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    }\n};\n\nmodule.exports = colorutil;\n\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"