ne.util.defineNamespace("fedoc.content", {});
fedoc.content["factory.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Colorpicker factory module\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar util = global.tui.util;\nvar colorutil = require('./colorutil');\nvar Drag = require('./core/drag');\nvar Layout = require('./layout');\nvar Palette = require('./palette');\nvar Slider = require('./slider');\n\nfunction throwError(msg) {\n    /* @if ENV='DEBUG' */\n    throw new Error(msg);\n    /* @endif */\n    /* @if ENV='RELEASE' */\n    alert(msg);\n    /* @endif */\n}\n\n/**\n * @constructor\n * @mixes CustomEvents\n * @param {object} options - options for colorpicker component\n *  @param {HTMLDivElement} options.container - container element\n *  @param {string} [options.color='#ffffff'] - default selected color\n *  @param {string[]} [options.preset] - color preset for palette (use base16 palette if not supplied)\n *  @param {string} [options.cssPrefix='tui-colorpicker-'] - css prefix text for each child elements\n *  @param {string} [options.detailTxt='Detail'] - text for detail button.\n * @example\n * var colorpicker = tui.component.colorpicker({\n *   container: document.getElementById('colorpicker')\n * });\n *\n * colorpicker.getColor();    // '#ffffff'\n */\nfunction Colorpicker(options) {\n    var that = this,\n        layout, palette, drag, slider;\n\n    if (!(that instanceof Colorpicker)) {\n        return new Colorpicker(options);\n    }\n    /**\n     * Option object\n     * @type {object}\n     */\n    options = that.options = util.extend({\n        container: null,\n        color: '#f8f8f8',\n        preset: [\n            '#181818',\n            '#282828',\n            '#383838',\n            '#585858',\n            '#b8b8b8',\n            '#d8d8d8',\n            '#e8e8e8',\n            '#f8f8f8',\n            '#ab4642',\n            '#dc9656',\n            '#f7ca88',\n            '#a1b56c',\n            '#86c1b9',\n            '#7cafc2',\n            '#ba8baf',\n            '#a16946'\n        ],\n        cssPrefix: 'tui-colorpicker-',\n        detailTxt: 'Detail'\n    }, options);\n\n    if (!options.container) {\n        throwError('Colorpicker(): need container option.');\n        return;\n    }\n\n    /**********\n     * Create layout view\n     **********/\n\n    /**\n     * @type {Layout}\n     */\n    layout = that.layout = new Layout(options, options.container);\n\n    /**********\n     * Create palette view\n     **********/\n    palette = new Palette(options, layout.container);\n    palette.on({\n        '_selectColor': function(e) {\n            var color = e.color,\n                opt = that.options;\n\n            if (!colorutil.isValidRGB(color)) {\n                that.render();\n                return;\n            }\n\n            if (opt.color === color) {\n                return;\n            }\n\n            opt.color = color;\n            that.render(color);\n\n            /**\n             * @event Colorpicker#selectColor\n             * @type {object}\n             * @property {string} color - selected color (hex string)\n             */\n            that.fire('selectColor', {\n                color: color\n            });\n        },\n        '_toggleSlider': function() {\n            slider.toggle(!slider.isVisible());\n        }\n    });\n\n    /**********\n     * Create slider view\n     **********/\n    slider = new Slider(options, layout.container);\n    slider.on({\n        '_selectColor': function(e) {\n            var color = e.color,\n                opt = that.options;\n\n            if (opt.color === color) {\n                return;\n            }\n\n            opt.color = color;\n            palette.render(color);\n\n            /**\n             * @event Colorpicker#selectColor\n             * @type {object}\n             * @property {string} color - selected color (hex string)\n             */\n            that.fire('selectColor', {\n                color: color\n            });\n        }\n    });\n\n    /**********\n     * Add child views\n     **********/\n    layout.addChild(palette);\n    layout.addChild(slider);\n\n    that.render(options.color);\n\n    /**********\n     * Drag handler\n     **********/\n    util.debounce(function() {\n        drag = that.drag = new Drag({\n            distance: 0\n        }, slider.container);\n\n        drag.on({\n            'dragStart': slider._onDragStart,\n            'drag': slider._onDrag,\n            'dragEnd': slider._onDragEnd,\n            'click': slider._onClick\n        }, slider);\n    }, 0)();\n}\n\n/**\n * Set colorpicker current color\n * @param {string} hexStr - hex formatted color string\n */\nColorpicker.prototype.setColor = function(hexStr) {\n    if (!colorutil.isValidRGB(hexStr)) {\n        throwError('Colorpicker#setColor(): need valid hex string color value');\n    }\n\n    this.options.color = hexStr;\n    this.render(hexStr);\n};\n\n/**\n * Get colorpicker current color\n * @returns {string} hex string formatted color\n */\nColorpicker.prototype.getColor = function() {\n    return this.options.color;\n};\n\n/**\n * Toggle colorpicker container element\n * @param {boolean} [isShow=true] - true when reveal colorpicker\n */\nColorpicker.prototype.toggle = function(isShow) {\n    this.layout.container.style.display = !!isShow ? 'block' : 'none';\n};\n\n/**\n * Render colorpicker\n * @param {string} [color] - selected color\n */\nColorpicker.prototype.render = function(color) {\n    this.layout.render(color || this.options.color);\n};\n\n/**\n * Destroy colorpicker component\n */\nColorpicker.prototype.destroy = function() {\n    this.drag.off();\n    this.layout.destroy();\n    this.options.container.innerHTML = '';\n\n    this.layout = this.options = this.drag = null;\n};\n\nutil.CustomEvents.mixin(Colorpicker);\n\nmodule.exports = Colorpicker;\n\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"